/**
 * @param {number[]} candidates
 * @param {number} target
 * @return {number[][]}
 */
var combinationSum = function(candidates, target) {
    answer = [];
    storage = new Map();
    combinations(candidates, target, [], 0);
    return answer;
};

var combinations = function(candidates, target, set, index) {
    if(target === 0) {
        let setCopy = set.slice();
        setCopy.sort((a, b) => a - b);
        let setString = setCopy.toString();
        if(!storage.has(setString)) {
            storage.set(setString);
            answer.push([...set]);
        }
        return;
    } else if (target < 0 || index === candidates.length) {
        return;
    }

    for (let i = index, l = candidates.length; i < l; i++) {
        set.push(candidates[i]);
        combinations(candidates, target - candidates[i], set, i);
        set.pop();
    }
    console.log(set, target);
    return;
}
