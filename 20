class Solution {
    public boolean isValid(String s) {
        if (s.length() % 2 != 0 || s.length() < 2) {
            return false;
        }
        HashMap<Character, Character> map = new HashMap<>();
        map.put('{', '}');
        map.put('[', ']');
        map.put('(', ')');

        int n = s.length();
        char[] stack = new char[n];
        int stackInd = 0, count = 0;
        for (int i = 0; i < n; i++) {
            char sign = s.charAt(i);
            if (map.containsKey(sign)) {
                stack[stackInd] = sign;
                stackInd++;
            } else {
                if (stackInd - 1 < 0 ) {
                    return false;
                }
                if ((int) sign - 2 == (int) stack[stackInd - 1] || (int) sign - 1 == (int) stack[stackInd - 1]) {
                    stackInd--;
                    count++;
                }
                else { return false; }
            }
        }
        return count == (n / 2);
    }
}
