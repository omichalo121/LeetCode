class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if (matrix.length == 0 || matrix[0].length == 0) {
            return false;
        } 
        return binarySearchRow(matrix, target, 0, matrix.length - 1);
    }

    private boolean binarySearchRow(int[][] matrix, int target, int upper, int bottom) {
        if (upper > bottom) {
            return false;
        }
        int midRow = upper + (bottom - upper) / 2;
        int l = matrix[midRow].length;
        if (matrix[midRow][0] <= target && target <= matrix[midRow][l - 1]) {
            int[] col = new int[l];
            for (int i = 0; i < l; i++) {
                col[i] = matrix[midRow][i];
            }
            return binarySearchCol(col, target, 0, l - 1);
        } else if (matrix[midRow][0] > target) {
            return binarySearchRow(matrix, target, upper, midRow - 1);
        } else {
            return binarySearchRow(matrix, target, midRow + 1, bottom);
        }
    }

    private boolean binarySearchCol(int[] matrixRow, int target, int left, int right) {
        if (left > right) {
            return false;
        }
        int midCol = left + (right - left) / 2;
        if (matrixRow[midCol] == target) {
            return true;
        } else if (matrixRow[midCol] > target) {
            return binarySearchCol(matrixRow, target, left, midCol - 1);
        } else {
            return binarySearchCol(matrixRow, target, midCol + 1, right);
        }
    }
}
